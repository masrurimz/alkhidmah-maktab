// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Booking {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @unique @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(PENDING)

  personCount       Int
  bookingCode       String
  booker            Booker
  contingentName    String                @default("")
  contingentAddress ContingentAddress
  contingentLeader  ContingentLeader
  contingentVechile ContingentVechileType

  regionCoordinator   RegionCoordiator @relation(fields: [regionCoordinatorId], references: [id])
  regionCoordinatorId String           @db.ObjectId

  @@index([regionCoordinatorId, contingentName, bookingCode])
  @@map("bookings")
}

enum BookingStatus {
  PENDING
  ON_PROCESS
  APPROVED
}

type Booker {
  name  String
  phone String
}

type ContingentAddress {
  province ContingentAddressProvince
  city     ContingentAddressCity
}

type ContingentAddressProvince {
  id   String
  name String
}

type ContingentAddressCity {
  id   String
  name String
}

type ContingentLeader {
  name  String
  phone String
}

model RegionCoordiator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@index([name, phone])
  @@map("region_coordinators")
}

enum ContingentVechileType {
  ELF
  MINI_BUS
  BUS
}

model MasterRegionIndonesiaProvince {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  provinceId String    @unique @map("id")
  name       String
  regencies  Regency[]

  @@map("master_region")
}

type Regency {
  id        String
  name      String
  districts District[]
}

type District {
  id       String
  name     String
  villages Village[]
}

type Village {
  id   String
  name String
}
